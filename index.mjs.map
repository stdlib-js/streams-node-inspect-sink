{"version":3,"file":"index.mjs","sources":["../node_modules/readable-stream/readable.js","../lib/validate.js","../node_modules/debug/src/index.js","../lib/debug.js","../lib/main.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["var Stream = require('stream');\nif (process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n  exports = module.exports = Stream.Readable;\n  exports.Readable = Stream.Readable;\n  exports.Writable = Stream.Writable;\n  exports.Duplex = Stream.Duplex;\n  exports.Transform = Stream.Transform;\n  exports.PassThrough = Stream.PassThrough;\n  exports.Stream = Stream;\n} else {\n  exports = module.exports = require('./lib/_stream_readable.js');\n  exports.Stream = Stream || exports;\n  exports.Readable = exports;\n  exports.Writable = require('./lib/_stream_writable.js');\n  exports.Duplex = require('./lib/_stream_duplex.js');\n  exports.Transform = require('./lib/_stream_transform.js');\n  exports.PassThrough = require('./lib/_stream_passthrough.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert-is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding] - default encoding when not explicitly specified when writing data\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'decodeStrings' ) ) {\n\t\topts.decodeStrings = options.decodeStrings;\n\t\tif ( !isBoolean( opts.decodeStrings ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decodeStrings', opts.decodeStrings ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'defaultEncoding' ) ) {\n\t\topts.defaultEncoding = options.defaultEncoding;\n\t\tif ( !isString( opts.defaultEncoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'defaultEncoding', opts.defaultEncoding ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'inspect-stream-sink' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Writable = require( 'readable-stream' ).Writable;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar copy = require( '@stdlib/utils-copy' );\nvar inherit = require( '@stdlib/utils-inherit' );\nvar setNonEnumerable = require( '@stdlib/utils-define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils-next-tick' );\nvar format = require( '@stdlib/string-format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_write` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after processing the streamed chunk\n* @returns {void}\n*/\nfunction write( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tthis._inspect.call( null, chunk, this._idx );\n\n\t// Once destroyed, ensure we do not block the event-loop when an upstream stream pipeline is behaving synchronously (otherwise, by continuing to process stream data synchronously, we'll continue receiving data and the stream will never be destroyed)...\n\tif ( this._destroyed ) {\n\t\treturn nextTick( clbk );\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {InspectSinkStream} stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Inspect stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectSinkStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = new InspectSinkStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*/\nfunction InspectSinkStream( options, clbk ) {\n\tvar inspect;\n\tvar opts;\n\tvar err;\n\tif ( !(this instanceof InspectSinkStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new InspectSinkStream( options, clbk );\n\t\t}\n\t\treturn new InspectSinkStream( options );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tinspect = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tinspect = options;\n\t}\n\tif ( !isFunction( inspect ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', inspect ) );\n\t}\n\t// Make the stream a Writable stream:\n\tdebug( 'Creating a writable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tWritable.call( this, opts );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Initialize a chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\t// Cache a reference to the inspect callback:\n\tsetNonEnumerableReadOnly( this, '_inspect', inspect );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Writable` prototype.\n*/\ninherit( InspectSinkStream, Writable );\n\n/**\n* Implements the `_write` method.\n*\n* @private\n* @name _write\n* @memberof InspectSinkStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after processing the streamed chunk\n*/\nsetNonEnumerableReadOnly( InspectSinkStream.prototype, '_write', write );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof InspectSinkStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {InspectSinkStream} stream instance\n*/\nsetNonEnumerableReadOnly( InspectSinkStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = InspectSinkStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\nvar copy = require( '@stdlib/utils-copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an inspect stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectSinkStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: 'index: 0'\n* // prints: {'value': 'a'}\n* // prints: 'index: 1'\n* // prints: {'value': 'b'}\n* // prints: 'index: 2'\n* // prints: {'value': 'c'}\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t} else {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\nvar copy = require( '@stdlib/utils-copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable inspect stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @throws {TypeError} options argument must be an object\n* @returns {Function} inspect stream factory\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn inspectStream;\n\n\t/**\n\t* Creates a writable stream for inspecting streamed data.\n\t*\n\t* @private\n\t* @param {Callback} clbk - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a callback function\n\t* @returns {InspectStream} inspect stream\n\t*/\n\tfunction inspectStream( clbk ) {\n\t\treturn new Stream( opts, clbk );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Writable stream which inspects streamed data.\n*\n* @module @stdlib/streams-node-inspect-sink\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams-node-inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = inspectSinkStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams-node-inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = inspectSinkStream.objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: {'value': 'a'}\n* // prints: index: 1\n* // prints: {'value': 'b'}\n* // prints: index: 2\n* // prints: {'value': 'c'}\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams-node-inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = inspectSinkStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n"],"names":["Stream","require","process","env","READABLE_STREAM","module","exports","Readable","Writable","Duplex","Transform","PassThrough","isObject","require$$0","hasOwnProp","require$$1","isBoolean","require$$2","isPrimitive","isString","require$$3","isNonNegative","require$$4","format","require$$5","validate_1","opts","options","objectMode","TypeError","highWaterMark","decodeStrings","defaultEncoding","type","debug_1","logger","isFunction","copy","setNonEnumerable","setNonEnumerableReadOnly","nextTick","require$$6","require$$7","DEFAULTS","require$$8","validate","require$$9","debug","require$$10","InspectSinkStream","clbk","inspect","err","this","arguments","length","JSON","stringify","call","prototype","chunk","encoding","_idx","toString","_inspect","_destroyed","error","self","emit","setReadOnly","stream","cb","factory","inspectStream","lib"],"mappings":"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"}